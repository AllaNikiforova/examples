package org.casino;

import java.util.*;

public class Main {
    /**
     * –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    public static int PLAYTIME = 35000;
    public static int t;
    public static Date startTime;

    /**
     * –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
     * @param line —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–±–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ "–ó–∞–ø–æ—Å—É—Ç–∏—Ç—å –∏–≥—Ä—É –µ—â–µ —Ä–∞–∑?"
     * @return –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –Ω–µ—Ç
     */
    public static Boolean checkLine(String line) {
        if (line.equals("exit")) {
            System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è\uD83D\uDE1E");
        } else if (line.equals("–∏–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ")) {
            System.out.println("–û–∫–µ–π, –∏–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑\uD83D\uDE0E \n\n\n\n\n");
            return true;
        } else {
            System.out.println("–ú—ã –Ω–µ –ø–æ–Ω—è–ª–∏, —á—Ç–æ —Ç—ã –≤–≤–µ–ª. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É\uD83D\uDE2D");
        }
        return false;
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º (–ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∏–≥—Ä–æ–∫–∞–º –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å—Ç–æ–ª—É) –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã –∫
     * —Ç–µ–∫—É—â–µ–π –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     *
     * @param teams –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å—Ç–æ–ª—É
     */
    public static void stopAllThreads(List<Team> teams) {
        for (int i = 0; i < teams.size(); i++) {
            teams.get(i).setStop();
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞–º –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å—Ç–æ–ª—É
     *
     * @param teams –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å—Ç–æ–ª—É
     */
    public static void continueAllThreads(List<Team> teams) {
        for (int i = 0; i < teams.size(); i++) {
            teams.get(i).continueWork();
        }
    }

    /**
     * –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
     *
     * @param teams   –ö–æ–º–∞–Ω–¥—ã-–∏–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä—É
     * @param winners –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏-–∏–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä—É
     */
    public static void results(List<Team> teams, List<Team> winners) {
        if (winners.size() == 1)
            System.out.println("\n\uD83E\uDD47–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä—ã:\uD83E\uDD47");
        else
            System.out.println("\n\uD83E\uDD47–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏–≥—Ä—ã:\uD83E\uDD47");

        for (Team winner : winners) {
            System.out.println(winner.getTeamName() + ": " + winner.getScore());
        }

        int prize = prize();
        if (winners.size() == 1)
            System.out.println("\n\uD83D\uDCB4–ö–æ–º–∞–Ω–¥–µ –¥–æ—Å—Ç–∞–µ—Ç—Å—è:\uD83D\uDCB4");
        else
            System.out.println("\n\uD83D\uDCB4–ö–æ–º–∞–Ω–¥–∞–º –¥–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ:\uD83D\uDCB4");

        for (int i = 0; i < winners.size(); i++) {
            System.out.println(winners.get(i).getTeamName() + ": " + prize / winners.size() + "¬•");
            winners.get(i).setPrize(prize / winners.size());
        }

        LinkedList<Team> teamList = new LinkedList();

        for (int i = 0; i < teams.size(); i++) {
            teamList.add(teams.get(i));
        }
        teamList.sort((t1, t2) -> t2.getScore() - t1.getScore());

        //üèÜ—ç–º–æ–¥–∑–∏
        System.out.println("\n===============================================================");
        System.out.println("=                    \uD83C\uDFC6–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\uD83C\uDFC6                    =");
        System.out.println("===============================================================");

        for (Team team : teamList) {
            System.out.println(team.getTeamName() + " - " + team.getScore());
        }

        System.out.println("===============================================================\n\n");


        //ü§ë —ç–º–æ–¥–∑–∏
        System.out.println("–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –ø–æ:\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\n");

        for (Team winner : winners) {
            List<Player> players = winner.getPlayers();
            for (int j = 0; j < 3; j++) {
                if (winner.getScore() == 0) {
                    players.get(j).setPrize(winner.getPrize() / 3);
                } else {
                    players.get(j).setPrize(players.get(j).getScoreFinal() * winner.getPrize() / winner.getScore());
                }

                System.out.println(players.get(j).getPlayerName() + " –∏–≥—Ä–æ–∫: –∏–∑ –∫–æ–º–∞–Ω–¥—ã " + winner.getTeamName() + " –∑–∞—Ä–∞–±–æ—Ç–∞–ª - " +
                        String.format("%.2f", players.get(j).getPrize()) + "¬•!");
            }
            System.out.println("\n");
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–¥–µ—Ä–æ–≤ –∏–≥—Ä—ã
     *
     * @param teams –ö–æ–º–∞–Ω–¥—ã-–∏–≥—Ä–æ–∫–∏
     * @return
     */
    public static List<Team> winners(List<Team> teams) {
        List<Team> currentWinners = new ArrayList<>();
        int currentMaxScore = -1;

        for (int i = 0; i < teams.size(); i++) {
            if (teams.get(i).getScore() > currentMaxScore) {
                currentWinners.clear();
                currentWinners.add(teams.get(i));
                currentMaxScore = teams.get(i).getScore();
            } else if (teams.get(i).getScore() == currentMaxScore) {
                currentWinners.add(teams.get(i));
            }
        }

        return currentWinners;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
     *
     * @return –¶–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
     */
    public static int prize() {
        return 1_000_000 + (int) (Math.random() * 9_000_001);
    }

    /**
     * –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤
     * @param teams –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω
     * @throws InterruptedException –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
     */
    public static void endWork(List<Team> teams) throws InterruptedException {
        for (Team team : teams) {
            team.interrupt();
            List<Player> players = team.getPlayers();
            for (Player player : players) {
                player.join();
            }
            team.join();
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–∞
     * @param teams —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∏–≥—Ä–∞—é—â–∏—Ö –≤ –∫–∞–∑–∏–Ω–æ
     */
    public static void runForTimer(List<Team> teams) {
        stopAllThreads(teams);

        List<Team> currentWinners = winners(teams);
        System.out.println("–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä –∏–≥—Ä—ã: ");
        for (Team currentWinner : currentWinners) {
            System.out.println(currentWinner.getTeamName() + ": " + currentWinner.getScore());
        }

        System.out.println("‚è≥–î–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã: " + ((PLAYTIME - (new Date().getTime() - startTime.getTime())) / 1000 + 1) + " —Å–µ–∫—É–Ω–¥‚è≥\n");
        continueAllThreads(teams);
    }

    public static void main(String[] args) throws InterruptedException {
        if (args.length == 0) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ t\n" +
                    "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ jar:\n" +
                    "java -jar application.jar 10, –≥–¥–µ 10 = t - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥");
        } else {
            t = Integer.parseInt(args[0]);

            if (t <= 0 || t > 10) {
                System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º: " + t + ". –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É\uD83D\uDE2D");
            } else {
                Scanner scanner = new Scanner(System.in);
                int counter = 0;
                while ((counter == 0) || (scanner.hasNext())) {
                    if (counter > 0) {
                        if (!checkLine(scanner.nextLine())) {
                            break;
                        }
                    }
                    counter++;
                    List<Team> teams = new ArrayList<>();
                    RandomTeamName randomTeamName = new RandomTeamName();
                    RandomName randomName = new RandomName();

                    for (int i = 0; i < t; i++) {
                        teams.add(new Team(randomTeamName.getFreeTeamName(), randomName));
                    }

                    startTime = new Date();
                    for (int i = 0; i < t; i++) {
                        teams.get(i).start();
                    }

                    Timer timer = new Timer("Timer");
                    TimerTask task = new TimerTask() {
                        public void run() {
                            runForTimer(teams);
                        }
                    };

                    timer.scheduleAtFixedRate(task, 100, 10_000);

                    Date newTime = new Date();
                    while ((newTime.getTime() - startTime.getTime()) < PLAYTIME) {
                        newTime = new Date();
                    }

                    timer.cancel();
                    stopAllThreads(teams);
                    List<Team> winners = winners(teams);
                    results(teams, winners);
                    endWork(teams);

                    System.out.println("\n\n\n\n\n–í–≤–µ–¥–∏—Ç–µ 'exit', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏–ª–∏ '–∏–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ', —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É");
                }
            }
        }
    }
}